// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  email       String       @unique
  username    String       @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  //Relations
  posts       Post[]
  likes       Like[]
  saves       SavedPosts[]
  followers   Follow[]     @relation("UserFollowers")
  followings  Follow[]     @relation("UserFollowings")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  //Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes Like[]
  saves SavedPosts[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId Int
  post   Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  followerId String
  follower   User   @relation("UserFollowers", fields: [followerId], references: [id])

  followingId String
  followings  User   @relation("UserFollowings", fields: [followingId], references: [id])
}
